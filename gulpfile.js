// 1Ô∏è‚É£ Requiere m√≥dulos
const { src, dest, watch, series } = require('gulp');
const browserSync = require('browser-sync').create();
const sass = require('gulp-sass')(require('sass')); // Si usas SASS
const plumber = require('gulp-plumber');
const { deleteAsync } = require('del');

// 2Ô∏è‚É£ Ruta base para el proxy
let currentProxy = 'http://localhost:3000/'; // Por defecto: frontend

// 3Ô∏è‚É£ Recarga navegador
function reload(done) {
  browserSync.reload();
  done();
}

// 4Ô∏è‚É£ Limpiar CSS
function cleanCss() {
  return deleteAsync('./public/build/css');
}

// 5Ô∏è‚É£ Compilar SASS/CSS (solo app.scss principal)
function compileSass() {
  return src('src/scss/app.scss')       // ‚ë† toma SOLO app.scss principal
    .pipe(plumber())                      // ‚ë° evita errores que bloqueen
    .pipe(sass())                         // ‚ë¢ compila SASS a CSS
    .pipe(dest('public/build/css'))      // ‚ë£ lo deja en public/build/css
    .pipe(browserSync.stream());         // ‚ë§ refresca navegador
}

// 6Ô∏è‚É£ Tarea combinada: limpiar + compilar
const buildCss = series(cleanCss, compileSass);

// 7Ô∏è‚É£ Servidor con Browsersync (para frontend o backend)
function serve(done) {
  browserSync.init({
    proxy: currentProxy,    // usa el valor din√°mico seg√∫n tarea
    open: true,
    notify: true
  });

  done();
}

// 8Ô∏è‚É£ Watch para frontend
function watchFrontend() {
  watch('src/scss/**/*.scss', buildCss);      // limpiar + compilar
  watch('public/**/*.php', reload);
  watch('public/**/*.html', reload);
  watch('public/**/*.js', reload);
  watch('public/build/css/**/*.css', reload);
}

// 9Ô∏è‚É£ Watch para backend (Screaming Architecture)  
function watchBackend() {
    watch('src/scss/**/*.scss', buildCss);    // tambi√©n vigila CSS
    watch('App/**/*.php', reload);
    watch('includes/**/*.php', reload);
}

// üîü Tareas p√∫blicas para ejecutar

// üëâ Frontend: gulp public
function setFrontend(done) {
  currentProxy = 'http://localhost:3001/zoo-Arcadia/public/';
  done();
}
exports.public = series(setFrontend, buildCss, serve, watchFrontend);

// üëâ Backend: gulp app  
function setBackend(done) {
  currentProxy = 'http://localhost:3002/App/employees/views';
  done();
}
exports.app = series(setBackend, buildCss, serve, watchBackend);